/*
    This is a port of the "driver" generated by recSQL for flight database
    in the paper "R-SQL: An SQL Database System with Extended Recursion"
    Gabriel Aranda, Susana Nieva, Fernando Saenz-Perez and Jaime 
    Sanchez-Hernandez
*/


package forflix.march;

import java.sql.*;


public class Reachable {

    private static int getRowCount(Statement stmt, String tableName) throws Exception {
        String query = "SELECT count(1) FROM " + tableName + ";";
        ResultSet rs = stmt.executeQuery(query);
        rs.next();
        return rs.getInt(1);
    }


    private static void setupDb(Connection conn) throws Exception {
        Statement stmt = conn.createStatement();
        stmt.execute("DROP TABLE IF EXISTS flight");
        stmt.execute("CREATE TABLE flight (ori TEXT, des TEXT, time REAL)");
        stmt.execute("DROP TABLE IF EXISTS reachable");
        stmt.execute("CREATE TABLE reachable (ori TEXT, des TEXT)");
        stmt.execute("DROP TABLE IF EXISTS travel");
        stmt.execute("CREATE TABLE travel (ori TEXT, des TEXT, time REAL)");
        stmt.execute("DROP TABLE IF EXISTS madAirport");
        stmt.execute("CREATE TABLE madAirport (ori TEXT, des TEXT)");
        stmt.execute("DROP TABLE IF EXISTS avoidMad");
        stmt.execute("CREATE TABLE avoidMad (ori TEXT, des TEXT)");
        stmt.close();
    }

    private static void stratum1(Connection conn) throws Exception {
        Statement stmt = conn.createStatement();
        stmt.execute("INSERT INTO flight (ori, des, time) VALUES ('lis', 'mad', 1);");
        stmt.execute("INSERT INTO flight (ori, des, time) VALUES ('mad', 'par', 1.5);");
        stmt.execute("INSERT INTO flight (ori, des, time) VALUES ('par', 'lon', 2);");
        stmt.execute("INSERT INTO flight (ori, des, time) VALUES ('lon', 'ny',  7);");
        stmt.execute("INSERT INTO flight (ori, des, time) VALUES ('par', 'ny',  8);");
        stmt.close();
    }
    
    private static void stratum2(Connection conn) throws Exception {
        int size1, size2 = 0;
        Statement stmt = conn.createStatement();
        stmt.execute("INSERT INTO travel (ori, des, time) SELECT ori, des, time FROM flight WHERE 1;");
        size1 = getRowCount(stmt, "travel");
        System.out.println("count: " + size1);
        String insert2 = "INSERT INTO travel (ori, des, time) SELECT flight.ori, travel.des, flight.time + travel.time FROM flight, travel WHERE flight.des = travel.ori EXCEPT select * from travel;";
        Boolean test = true;
        while (test) {            
            stmt.execute(insert2);
            size2 = getRowCount(stmt, "travel");
            if (size2 > size1) {
                size1 = size2;
            }
            else {
                test = false;
            }
        }
        size1 = getRowCount(stmt, "travel");
        System.out.println("end count: " + size1);
        stmt.close();
    }

    
    private static void stratum3(Connection conn) throws Exception {
        int size1, size2 = 0;
        Statement stmt = conn.createStatement();
        stmt.execute("INSERT INTO reachable (ori, des) SELECT ori, des FROM flight WHERE 1;");
        size1 = getRowCount(stmt, "reachable");
        System.out.println("count: " + size1);
        String insert2 = "INSERT INTO reachable (ori, des) SELECT reachable.ori, flight.des FROM reachable, flight where reachable.des = flight.ori EXCEPT SELECT * FROM reachable;";
        Boolean test = true;
        while (test) {            
            stmt.execute(insert2);
            size2 = getRowCount(stmt, "reachable");
            if (size2 > size1) {
                size1 = size2;
            }
            else {
                test = false;
            }
        }
        size1 = getRowCount(stmt, "reachable");
        System.out.println("end count: " + size1);
        stmt.close();
    }
    
    private static void stratum4(Connection conn) throws Exception {
        int size1 = 0;
        Statement stmt = conn.createStatement();
        stmt.execute("INSERT INTO madAirport (ori, des) SELECT reachable.ori, reachable.des FROM reachable WHERE reachable.ori='mad' OR reachable.des='mad';");
        size1 = getRowCount(stmt, "madAirport");
        System.out.println("count: " + size1);
        stmt.close();
    }

    private static void stratum5(Connection conn) throws Exception {
        int size1, size2 = 0;
        Statement stmt = conn.createStatement();
        stmt.execute("INSERT INTO avoidMad (ori, des) SELECT reachable.ori, reachable.des FROM reachable WHERE 1 EXCEPT SELECT * FROM madAirport WHERE 1;");
        size1 = getRowCount(stmt, "avoidMad");
        System.out.println("count: " + size1);
        String insert2 = "INSERT INTO avoidMad (ori, des) SELECT reachable.ori, reachable.des FROM reachable WHERE 1 EXCEPT SELECT * FROM madAirport WHERE 1 EXCEPT SELECT * FROM avoidMad;";
        Boolean test = true;
        while (test) {            
            stmt.execute(insert2);
            size2 = getRowCount(stmt, "avoidMad");
            if (size2 > size1) {
                size1 = size2;
            }
            else {
                test = false;
            }
        }
        size1 = getRowCount(stmt, "avoidMad");
        System.out.println("end count: " + size1);
        stmt.close();
    }
    
    public static void main(String[] args) throws Exception {        
        Connection conn = DriverManager.getConnection("jdbc:sqlite:e://coding/java/netbeans-for-flix/data/reachable.sqlite");
        System.out.println("Setup...");
        setupDb(conn);
        System.out.println("Stratum 1...");
        stratum1(conn);
        System.out.println("Stratum 2...");
        stratum2(conn);
        System.out.println("Stratum 3...");
        stratum3(conn);
        System.out.println("Stratum 4...");
        stratum4(conn);
        System.out.println("Stratum 5...");
        stratum5(conn);
        conn.close();
    }
}
